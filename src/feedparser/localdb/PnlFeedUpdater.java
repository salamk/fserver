/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package feedparser.localdb;

import feedparser.GeneralDB;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author salam
 */
public class PnlFeedUpdater extends javax.swing.JPanel {

    private final ArrayList<String> symbolList;
    private final ArrayList<KData> kdataList;
    private final ArrayList<TickData> pvAtomList;
    private final ArrayList<TickData> pAtomList;
    private final ArrayList<SData> sdataList;
    private final ArrayList<StaticData> sAtomList;

    private final File pvAtomFile;
    private final File pAtomFile;
    private final File sAtomFile;

    /**
     * Creates new form PnlFeedUpdater
     */
    public PnlFeedUpdater() {
        initComponents();
        symbolList = new ArrayList<>();
        kdataList = new ArrayList<>();
        pvAtomList = new ArrayList<>();
        pAtomList = new ArrayList<>();
        sdataList = new ArrayList<>();
        sAtomList = new ArrayList<>();
        pvAtomFile = new File("pvatomfile.csv");
        pAtomFile = new File("patomfile.csv");
        sAtomFile = new File("satomfile.csv");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfFeedFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jdcFileDate = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        tfDir = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();

        jButton1.setText("Path");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Or: Download");

        jButton3.setText("Update PV Data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Update P-Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Update Static Data");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Extract Symbol");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(215, 232, 232));

        tfDir.setText("feeder");

        jButton7.setText("Update Directory");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel1.setText("* This button will update whole directory");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfDir, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton8.setText("Download");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(158, 158, 158)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5))
                            .addComponent(jButton8)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdcFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(30, 30, 30)
                .addComponent(jdcFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        updateDirectoryOneClick();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        extractSymbols(tfFeedFile.getText());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        makeStatic(tfFeedFile.getText());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        extractPAtom();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.extractPVAtom();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        browse();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void updateDirectoryOneClick() {
        
        File folder = new File("feeder");
        File[] list = folder.listFiles();
        
        for (int i = 0; i <= list.length - 1; i++) {
            if (list[i].isDirectory()) {

            } else {
                                
                symbolList.clear();
                kdataList.clear();
                pvAtomList.clear();
                pAtomList.clear();
                sdataList.clear();
                sAtomList.clear();

                String fileName = list[i].getName();
               // System.out.println("File: "+fileName);
                
                fileName = fileName.replaceAll("\\.txt", "");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                
                Date d = new Date();
                
                try {
                    d = sdf.parse(fileName);

                } catch (ParseException pe) {

                }

                this.jdcFileDate.setDate(d);

                
                extractSymbols(list[i].getAbsolutePath());
                this.extractPVAtom();
                extractPAtom();
                makeStatic(list[i].getAbsolutePath());
                System.out.println("File "+fileName+" imported successfully");
                
            }

        }

    }
    
    private String[] getPvExistingDates(){
        String query = "select distinct event_date from pvtable";
        ArrayList <Vector> al = new GeneralDB().searchRecord(query);
        String[] dt = new String[al.size()];
        int count = 0;
        for(Vector v: al){
            String d = (String)v.get(0);
            dt[count] = d;
            count++;
        }
        
        return dt;
    }

    private void makeStatic(String path) {
        boolean prepared = this.prepareSDataList(path);
        if (prepared) {
            Date d = this.jdcFileDate.getDate();

            if (d == null) {
                JOptionPane.showMessageDialog(null, "Please provide date of feed file");
            } else {
                boolean extracted = this.extractSAtomSymbol(d);
                if (extracted) {

                    boolean created = this.createSAtomFile();
                    if (created) {

                        GeneralDB gdb = new GeneralDB();

                        String query = "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(null, "
                                + "'SDATA', "
                                + "'" + sAtomFile.getAbsolutePath() + "' , "
                                + "',' , '\"' ," + "'UTF-8', 0)";

                        //System.out.println(query);
                        String msg = gdb.execute(query);

                        if (msg.compareToIgnoreCase("ok") == 0) {
                           // System.out.println("1xdaily record updated\n");
                        } else {
                            System.out.println(msg);
                        }

                    } else {
                    }

                } else {
                }
            }
        }

    }

    private boolean createSAtomFile() {
        boolean written = false;
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(sAtomFile));
            int c = 0;
            for (StaticData sd : this.sAtomList) {

                String line = sd.getPrice() + "," + sd.getVolume() + ","
                        + "" + sd.getEventTime() + "," + sd.getdDate() + ","
                        + "" + sd.getUid() + "\n";

                bw.write(line);

                c++;
            }

            bw.close();
            written = true;

        } catch (IOException ioe) {
            System.out.println("Error in creating file\n" + ioe.getMessage());
        } catch (Exception e) {
            System.out.println("Error in creating file\n" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private boolean extractSAtomSymbol(Date date) {
        boolean extracted = false;
        int numLine = sdataList.size();
        int secUnit = (int) 28800 / numLine;

        Calendar cal = new GregorianCalendar();
        cal.setTime(date);
        String dt = new SimpleDateFormat("yyyy-MM-dd").format(date);
        String dateStr = dt + " 09:30:00";
        Date tstampDate = new Date();
        SimpleDateFormat sdfHMS = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            tstampDate = sdfHMS.parse(dateStr);
        } catch (ParseException pe) {
            System.out.println(pe.getMessage());
        }

        cal.setTime(tstampDate);

        try {
            int c = 0;
            for (SData s : this.sdataList) {

                StaticData sd = new StaticData();
                sd.setdDate(dt);
                sd.setPrice(s.getRate());
                sd.setVolume(s.getVolume());
                String etime = sdfHMS.format(cal.getTime());
                sd.setEventTime(etime);
                sd.setUid(etime);
                sAtomList.add(sd);

                cal.add(Calendar.SECOND, secUnit);
                c++;
            }

            extracted = true;

        } catch (Exception e) {

            extracted = false;
        }

        return extracted;

    }

    private boolean prepareSDataList(String path) {
        BufferedWriter bw = null;
        BufferedReader br = null;
        boolean prepared = false;
        int tv = 0;
        DecimalFormat df = new DecimalFormat("#.##");

        try {

            File inputFile = new File(path);
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";

            while ((line = br.readLine()) != null) {

                if (line.startsWith("S")) {
                    String[] toke = line.split("\\|");

                    String rot = toke[4];
                    String tov = toke[2];

                    double rate = Double.parseDouble(rot);
                    rate = rate / 100;
                    int vol = Integer.parseInt(tov);
                    int this_vol = vol - tv;
                    tv = vol;

                    String l = rate + "," + this_vol;

                    if (this_vol == 0) {
                    } else {
                        SData sd = new SData(df.format(rate), df.format(this_vol));
                        sdataList.add(sd);
                    }

                }
            }
            prepared = true;

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());

        } catch (Exception e) {

            System.out.println(e.getMessage());
            e.printStackTrace();

        } finally {
            try {
                br.close();
                bw.close();
            } catch (Exception e) {
            }
        }

        return prepared;

    }

    private void extractPAtom() {
        if (this.pvAtomList.size() < 10) {
            JOptionPane.showMessageDialog(null, "Unrealistic size returned"
                    + "by pv-atom cluster");
        } else {

            String symbol = pvAtomList.get(0).getSymbolCode();

            double rate = 0;
            int i = 1;
            for (TickData td : pvAtomList) {
                String sym = td.getSymbolCode();
                if (sym.compareToIgnoreCase(symbol) == 0) {
                    double r = Double.parseDouble(td.getSymbolPrice());
                    if (r == rate) {

                    } else {
                        this.pAtomList.add(td);
                        i++;
                    }

                    rate = r;
                }

                symbol = sym;

            }

            boolean written = this.createPAtomFile();

            if (written) {

                GeneralDB gdb = new GeneralDB();

                String query = "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(null, "
                        + "'PTABLE', "
                        + "'" + pAtomFile.getAbsolutePath() + "' , "
                        + "',' , '\"' ," + "'UTF-8', 0)";

                //System.out.println(query);
                String msg = gdb.execute(query);

                if (msg.compareToIgnoreCase("ok") == 0) {
                   // System.out.println("1xdaily record updated\n");
                } else {
                    System.out.println(msg);
                }

            }
        }
    }

    private boolean createPAtomFile() {
        boolean written = false;
      //  System.out.println("Creating output file...");
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(pAtomFile));
            int c = 0;
            for (TickData td : this.pAtomList) {

                String line = td.getSymbolCode() + "," + td.getSymbolPrice() + ","
                        + "" + td.getSymbolVolume() + "," + td.getEventTime() + ","
                        + "" + td.getDdate() + "," + td.getUid() + "\n";

                bw.write(line);

               // System.out.println("Entry: " + c);

                c++;
            }

            bw.close();

            written = true;

        } catch (IOException ioe) {
            System.out.println("Error in creating output file...");
            System.out.println("Error");
            System.out.println("Error in creating file\n" + ioe.getMessage());
        } catch (Exception e) {
            System.out.println("Error in creating output file...");
            System.out.println("Error");
            System.out.println("Error in creating file\n" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private void extractPVAtom() {

        Date date = this.jdcFileDate.getDate();

        if (date == null) {
            JOptionPane.showMessageDialog(null, "Please select date");
        } else if (this.symbolList.size() < 10) {
            JOptionPane.showMessageDialog(null, "Number of companies in list is not valid");
        } else if (this.kdataList.size() < 10) {
            JOptionPane.showMessageDialog(null, "The size returned by ktype is not valid");
        } else {
            for (String symbol : symbolList) {
                extractPVAtomSymbol(symbol, date);
               // System.out.println("Extraction completes");
            }

            boolean written = createPVAtomFile();
            if (written) {

                //=============impoty code goes here====================
                GeneralDB gdb = new GeneralDB();

                String query = "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(null, "
                        + "'PVTABLE', "
                        + "'" + pvAtomFile.getAbsolutePath() + "' , "
                        + "',' , '\"' ," + "'UTF-8', 0)";

                //System.out.println(query);
                String msg = gdb.execute(query);

                if (msg.compareToIgnoreCase("ok") == 0) {
                   // System.out.println("1xdaily record updated\n");
                } else {
                    System.out.println(msg);
                }

            } else {

                System.out.println("Error in writing file");
            }

        }
    }

    private boolean createPVAtomFile() {
        boolean written = false;

        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(pvAtomFile));
            int c = 0;

          //  System.out.println("PV Atom List has a size of " + pvAtomList.size());
            for (TickData td : this.pvAtomList) {

                String line = td.getSymbolCode() + "," + td.getSymbolPrice() + ","
                        + "" + td.getSymbolVolume() + "," + td.getEventTime() + ","
                        + "" + td.getDdate() + "," + td.getUid() + "\n";

                bw.write(line);

                c++;

              //  System.out.println("LIne written " + c);
            }

            bw.close();
            written = true;

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private int getNumLine(String symbol) {
        int count = 0;
        for (int i = 0; i <= this.kdataList.size() - 1; i++) {
            KData kd = kdataList.get(i);
            String s = kd.getLineSymbol();
            if (s.compareToIgnoreCase(symbol) == 0) {
                count++;
            }
        }

        return count;
    }

    private void extractPVAtomSymbol(String symbol, Date date) {
        int numLine = getNumLine(symbol);
        int secUnit = (int) 28800 / numLine;

        Calendar cal = new GregorianCalendar();
        cal.setTime(date);
        String dt = new SimpleDateFormat("yyyy-MM-dd").format(date);
        String dateStr = dt + " 09:30:00";
        Date tstampDate = new Date();
        SimpleDateFormat sdfHMS = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            tstampDate = sdfHMS.parse(dateStr);
        } catch (ParseException pe) {
            System.out.println(pe.getMessage());
        }

        cal.setTime(tstampDate);

        for (KData kd : this.kdataList) {
            if (kd.getLineSymbol().compareToIgnoreCase(symbol) == 0) {
                TickData td = new TickData();
                td.setDdate(dt);
                td.setSymbolCode(symbol);
                td.setSymbolPrice(kd.getRate());
                td.setSymbolVolume(kd.getVolume());
                String etime = sdfHMS.format(cal.getTime());
                td.setEventTime(etime);
                td.setUid(etime + "-" + symbol);
                pvAtomList.add(td);
                cal.add(Calendar.SECOND, secUnit);
            }
        }

    }

    private void extractSymbols(String path) {
        Set<String> s = getSymbolSet(path);

        for (String symbol : s) {
            symbolList.add(symbol);
        }

        boolean prepared = prepareKDataList(path);
        
        if (prepared) {
            
        } else {
            
        }
    }

    private boolean prepareKDataList(String path) {
        BufferedWriter bw = null;
        BufferedReader br = null;
        boolean prepared = false;
        int tv = 0;
        DecimalFormat df = new DecimalFormat("#.##");

        try {

            File inputFile = new File(path);
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";

            while ((line = br.readLine()) != null) {

                if (line.startsWith("K")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");
                    String lineSymbol = toke[2];
                    lineSymbol = lineSymbol.trim();
                    String rot = toke[7];
                    String tov = toke[8];

                    double rate = Double.parseDouble(rot);
                    rate = rate / 10000;
                    String rt = df.format(rate);

                    int vi = Integer.parseInt(tov);
                    tov = Integer.toString(vi);

                    KData k = new KData(lineSymbol, rt, tov);
                    kdataList.add(k);

                }
            }
            prepared = true;
            //System.out.println("Preparing kdata list complete");
           // System.out.println("Sie is : " + kdataList.size());

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());

        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();

        } finally {
            try {
                br.close();
                bw.close();
            } catch (Exception e) {
            }
        }

        return prepared;

    }

    private Set<String> getSymbolSet(String path) {
        Set<String> s = new HashSet<>();

        File inputFile = new File(path);
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.startsWith("K")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");
                    String lineSymbol = toke[2];
                    lineSymbol = lineSymbol.trim();
                    s.add(lineSymbol);
                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } finally {
            try {
                br.close();

            } catch (Exception e) {
            }
        }

        return s;
    }

    private void browse() {

        JFileChooser fileChooser = new JFileChooser();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");

        //  System.out.println(dir + sep);
        File directory = new File(dir + sep + "Parser");
        //  System.out.println(directory);

        if (!(directory.exists())) {
            directory.mkdir();
        }

        fileChooser.setCurrentDirectory(directory);

        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            tfFeedFile.setText(selectedFile.getAbsolutePath());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JDateChooser jdcFileDate;
    private javax.swing.JTextField tfDir;
    private javax.swing.JTextField tfFeedFile;
    // End of variables declaration//GEN-END:variables
}
