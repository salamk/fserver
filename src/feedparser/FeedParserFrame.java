/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package feedparser;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author salam
 */
public class FeedParserFrame extends javax.swing.JFrame {

    /**
     * Creates new form FeedParserFrame
     */
    public FeedParserFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfFeedFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        tfOutputDirectory = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jdcFileDate = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Feed File Path");

        tfFeedFile.setText("/home/salam/Development/cache/Atom/20160505.txt");

        jButton1.setText("Browse");

        tfOutputDirectory.setText("/home/salam/Development/cache/test");

        jLabel2.setText("Output Directory");

        jButton2.setText("Browse");

        jLabel4.setText("Feed file date");

        jButton3.setText("Execute Parsing Process");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(31, 31, 31)
                                        .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jdcFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(tfOutputDirectory))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)))
                            .addComponent(jButton3))
                        .addGap(0, 255, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOutputDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jdcFileDate, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        executeParsing();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void executeParsing() {
        Date d = this.jdcFileDate.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        String folder_name = sdf.format(d);
        File folder = new File(this.tfOutputDirectory.getText() + "/" + folder_name);
        if (folder.exists()) {
            JOptionPane.showMessageDialog(null, "Folder already exists");
        } else {
            folder.mkdir();
            String fpath = this.tfOutputDirectory.getText() + "/" + folder_name;

            File fpt = new File(fpath + "/" + "pvatom");
            fpt.mkdir();

            File fopt = new File(fpath + "/" + "patom");
            fopt.mkdir();

            executeParsingK(fpt.getAbsolutePath());
            executeParsingP(fopt.getAbsolutePath());
            executeParsingS(fpath);
        }
        // executeParsingV();
    }

    private void executeParsingK(String fpath) {

        Set<String> s = this.getSymbolSet();
        for (String symbol : s) {

            File inputFile = new File(this.tfFeedFile.getText());
            File fout = new File(fpath + "/" + symbol + ".txt");

            BufferedWriter bw = null;
            BufferedReader br = null;

            try {
                FileOutputStream fos = new FileOutputStream(fout);
                bw = new BufferedWriter(new OutputStreamWriter(fos));
                br = new BufferedReader(new FileReader(inputFile));
                String line = "";
                while ((line = br.readLine()) != null) {
                    if (line.startsWith("K")) {
                        ////System.out.println(line);
                        String[] toke = line.split("\\|");
                        String lineSymbol = toke[2];
                        lineSymbol = lineSymbol.trim();
                        if (lineSymbol.compareToIgnoreCase(symbol) == 0) {
                            String rot = toke[7];
                            String tov = toke[8];

                            double rate = Double.parseDouble(rot);
                            rate = rate / 10000;
                            int vol = Integer.parseInt(tov);
                            String l = rate + "," + vol;
                            bw.write(l);
                            bw.newLine();
                        }
                    }
                }
            } catch (IOException ioe) {
                System.out.println(ioe.getMessage());
            } finally {
                try {
                    br.close();
                    bw.close();
                } catch (Exception e) {
                }
            }
        }

    }

    private void executeParsingP(String fpath) {

        Set<String> s = this.getSymbolSet();
        for (String symbol : s) {

            File inputFile = new File(this.tfFeedFile.getText());
            File fout = new File(fpath + "/" + symbol + ".txt");

            BufferedWriter bw = null;
            BufferedReader br = null;

            try {
                FileOutputStream fos = new FileOutputStream(fout);
                bw = new BufferedWriter(new OutputStreamWriter(fos));
                br = new BufferedReader(new FileReader(inputFile));
                String line = "";
                double prate = 0;
                while ((line = br.readLine()) != null) {
                    if (line.startsWith("K")) {
                        ////System.out.println(line);
                        String[] toke = line.split("\\|");
                        String lineSymbol = toke[2];
                        lineSymbol = lineSymbol.trim();
                        if (lineSymbol.compareToIgnoreCase(symbol) == 0) {
                            String rot = toke[7];

                            double rate = Double.parseDouble(rot);
                            rate = rate / 10000;

                            if (prate == rate) {

                            } else {

                                bw.write(Double.toString(rate));
                                bw.newLine();
                                prate = rate;
                            }
                        }
                    }
                }
            } catch (IOException ioe) {
                System.out.println(ioe.getMessage());
            } finally {
                try {
                    br.close();
                    bw.close();
                } catch (Exception e) {
                }
            }
        }

    }

    private Set<String> getSymbolSet() {
        Set<String> s = new HashSet<>();

        File inputFile = new File(this.tfFeedFile.getText());
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.startsWith("K")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");
                    String lineSymbol = toke[2];
                    lineSymbol = lineSymbol.trim();
                    s.add(lineSymbol);
                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } finally {
            try {
                br.close();

            } catch (Exception e) {
            }
        }

        return s;
    }

    private void executeParsingS(String fpath) {

        File inputFile = new File(this.tfFeedFile.getText());
        File fout = new File(fpath + "/" + "static.txt");

        BufferedWriter bw = null;
        BufferedReader br = null;
        int tv = 0;

        try {
            FileOutputStream fos = new FileOutputStream(fout);
            bw = new BufferedWriter(new OutputStreamWriter(fos));
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.startsWith("S")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");

                    String rot = toke[4];
                    String tov = toke[2];

                    double rate = Double.parseDouble(rot);
                    rate = rate / 100;
                    int vol = Integer.parseInt(tov);
                    int this_vol = vol - tv;
                    tv = vol;

                    String l = rate + "," + this_vol;

                    if (this_vol == 0) {
                    } else {
                        bw.write(l);
                        bw.newLine();
                    }

                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } finally {
            try {
                br.close();
                bw.close();
            } catch (Exception e) {
            }
        }

    }

    private void executeParsingV() {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeedParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeedParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeedParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeedParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FeedParserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private com.toedter.calendar.JDateChooser jdcFileDate;
    private javax.swing.JTextField tfFeedFile;
    private javax.swing.JTextField tfOutputDirectory;
    // End of variables declaration//GEN-END:variables
}
