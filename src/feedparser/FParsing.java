/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package feedparser;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.util.Zip4jConstants;

/**
 *
 * @author salam
 */
public class FParsing extends javax.swing.JFrame {

    private ArrayList<String> symbolList;
    private ArrayList<KData> kdataList;
    private ArrayList<TickData> pvAtomList;
    private ArrayList<TickData> pAtomList;
    private ArrayList<SData> sdataList;
    private ArrayList<StaticData> sAtomList;
    private static final String zip_password = "TpbWvajk@Fy07L?o7GRkyQ&I323jxmds32$3#dsb";
    private static final String upload_server_url = "http://www.coolmarch.net/cmuzf.php?configstr=";
    File compressedPvFile;
    File compressedPFile;
    File compressedSFile;
    File compressedCatFile;

    /**
     * Creates new form FParsing
     */
    public FParsing() {
        initComponents();
        symbolList = new ArrayList<>();
        pvAtomList = new ArrayList<>();
        kdataList = new ArrayList<>();
        pAtomList = new ArrayList<>();
        sdataList = new ArrayList<>();
        sAtomList = new ArrayList<>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        tfFeedFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jdcFileDate = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        btnUpload3 = new javax.swing.JButton();
        tfExtractPVAtomStatus = new javax.swing.JTextField();
        tfUploadSFile = new javax.swing.JTextField();
        tfExtractPVAtomStatus1 = new javax.swing.JTextField();
        tfPatom = new javax.swing.JTextField();
        tfPatom1 = new javax.swing.JTextField();
        tfSatom = new javax.swing.JTextField();
        tfSatom1 = new javax.swing.JTextField();
        btnExtractPv = new javax.swing.JButton();
        btnPatom = new javax.swing.JButton();
        btnStatic = new javax.swing.JButton();
        btnUpload1 = new javax.swing.JButton();
        tfUploadPvFile = new javax.swing.JTextField();
        btnUpload2 = new javax.swing.JButton();
        tfUploadPFile = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnExtractSymbol = new javax.swing.JButton();
        tfSymbolParsingStatus = new javax.swing.JTextField();
        tfSymbolParsingStatus1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnExtractSymbol1 = new javax.swing.JButton();
        tfdailyStatus1 = new javax.swing.JTextField();
        tfDailyStatus2 = new javax.swing.JTextField();
        btnUpload4 = new javax.swing.JButton();
        tfDailyStatus3 = new javax.swing.JTextField();
        tfdailyStatus2 = new javax.swing.JTextField();
        btnUploadContainer = new javax.swing.JButton();
        tfDailyFolderPath = new javax.swing.JTextField();
        tfDailyStatus21 = new javax.swing.JTextField();
        tfDailyStatus6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        tfCatScript = new javax.swing.JTextField();
        btnCatUpload = new javax.swing.JButton();
        tfCatUpload = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jButton6.setText("Download");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jdcFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfFeedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(jButton6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(232, 232, 236));

        btnUpload3.setText("Upload");
        btnUpload3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpload3ActionPerformed(evt);
            }
        });

        tfExtractPVAtomStatus.setEditable(false);
        tfExtractPVAtomStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfExtractPVAtomStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfExtractPVAtomStatus.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfExtractPVAtomStatus.setEnabled(false);

        tfUploadSFile.setEditable(false);
        tfUploadSFile.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUploadSFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfUploadSFile.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfUploadSFile.setEnabled(false);
        tfUploadSFile.setOpaque(false);

        tfExtractPVAtomStatus1.setEditable(false);
        tfExtractPVAtomStatus1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfExtractPVAtomStatus1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfExtractPVAtomStatus1.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfExtractPVAtomStatus1.setEnabled(false);

        tfPatom.setEditable(false);
        tfPatom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfPatom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfPatom.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfPatom.setEnabled(false);

        tfPatom1.setEditable(false);
        tfPatom1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfPatom1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfPatom1.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfPatom1.setEnabled(false);

        tfSatom.setEditable(false);
        tfSatom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSatom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfSatom.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfSatom.setEnabled(false);

        tfSatom1.setEditable(false);
        tfSatom1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSatom1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfSatom1.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfSatom1.setEnabled(false);

        btnExtractPv.setText("Extract PV Atom");
        btnExtractPv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractPvActionPerformed(evt);
            }
        });

        btnPatom.setText("Extract P-Atom");
        btnPatom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatomActionPerformed(evt);
            }
        });

        btnStatic.setText("Extract S-Atom");
        btnStatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStaticActionPerformed(evt);
            }
        });

        btnUpload1.setText("Upload");
        btnUpload1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpload1ActionPerformed(evt);
            }
        });

        tfUploadPvFile.setEditable(false);
        tfUploadPvFile.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUploadPvFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfUploadPvFile.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfUploadPvFile.setEnabled(false);
        tfUploadPvFile.setOpaque(false);

        btnUpload2.setText("Upload");
        btnUpload2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpload2ActionPerformed(evt);
            }
        });

        tfUploadPFile.setEditable(false);
        tfUploadPFile.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUploadPFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfUploadPFile.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfUploadPFile.setEnabled(false);
        tfUploadPFile.setOpaque(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExtractPv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPatom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStatic, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfSatom)
                    .addComponent(tfPatom, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfExtractPVAtomStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfSatom1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpload3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUploadSFile, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfExtractPVAtomStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpload1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUploadPvFile))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tfPatom1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpload2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUploadPFile)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExtractPv)
                    .addComponent(tfExtractPVAtomStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfExtractPVAtomStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload1)
                    .addComponent(tfUploadPvFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPatom)
                    .addComponent(tfPatom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPatom1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload2)
                    .addComponent(tfUploadPFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStatic)
                    .addComponent(tfSatom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSatom1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload3)
                    .addComponent(tfUploadSFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(230, 214, 230));

        btnExtractSymbol.setText("Parse Symbols");
        btnExtractSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractSymbolActionPerformed(evt);
            }
        });

        tfSymbolParsingStatus.setEditable(false);
        tfSymbolParsingStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSymbolParsingStatus.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfSymbolParsingStatus.setEnabled(false);

        tfSymbolParsingStatus1.setEditable(false);
        tfSymbolParsingStatus1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSymbolParsingStatus1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfSymbolParsingStatus1.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfSymbolParsingStatus1.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExtractSymbol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSymbolParsingStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSymbolParsingStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExtractSymbol)
                    .addComponent(tfSymbolParsingStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSymbolParsingStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Daily Data Lists"));

        btnExtractSymbol1.setText("Parse Symbols");
        btnExtractSymbol1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractSymbol1ActionPerformed(evt);
            }
        });

        tfdailyStatus1.setEditable(false);
        tfdailyStatus1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfdailyStatus1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfdailyStatus1.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfdailyStatus1.setEnabled(false);

        tfDailyStatus2.setEditable(false);
        tfDailyStatus2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDailyStatus2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDailyStatus2.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfDailyStatus2.setEnabled(false);

        btnUpload4.setText("Create Zip Container");
        btnUpload4.setEnabled(false);
        btnUpload4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpload4ActionPerformed(evt);
            }
        });

        tfDailyStatus3.setEditable(false);
        tfDailyStatus3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDailyStatus3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDailyStatus3.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfDailyStatus3.setEnabled(false);

        tfdailyStatus2.setEditable(false);
        tfdailyStatus2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfdailyStatus2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfdailyStatus2.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfdailyStatus2.setEnabled(false);

        btnUploadContainer.setText("Upload Container");
        btnUploadContainer.setEnabled(false);
        btnUploadContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadContainerActionPerformed(evt);
            }
        });

        tfDailyFolderPath.setEditable(false);
        tfDailyFolderPath.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDailyFolderPath.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDailyFolderPath.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfDailyFolderPath.setEnabled(false);

        tfDailyStatus21.setEditable(false);
        tfDailyStatus21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDailyStatus21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDailyStatus21.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfDailyStatus21.setEnabled(false);

        tfDailyStatus6.setEditable(false);
        tfDailyStatus6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDailyStatus6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDailyStatus6.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfDailyStatus6.setEnabled(false);

        jLabel1.setText("Folder");
        jLabel1.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnUpload4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExtractSymbol1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUploadContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tfdailyStatus1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDailyStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfDailyFolderPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfdailyStatus2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDailyStatus3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDailyStatus21, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDailyStatus6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExtractSymbol1)
                    .addComponent(tfdailyStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDailyStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload4)
                    .addComponent(tfdailyStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDailyStatus21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDailyStatus3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadContainer)
                    .addComponent(tfDailyStatus6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDailyFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Cat-Scripting"));

        jButton2.setText("Cat-Script");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tfCatScript.setEditable(false);
        tfCatScript.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfCatScript.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfCatScript.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfCatScript.setEnabled(false);

        btnCatUpload.setText("Upload");
        btnCatUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatUploadActionPerformed(evt);
            }
        });

        tfCatUpload.setEditable(false);
        tfCatUpload.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfCatUpload.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfCatUpload.setDisabledTextColor(new java.awt.Color(0, 51, 204));
        tfCatUpload.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCatScript, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCatUpload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCatUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(tfCatScript, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCatUpload)
                    .addComponent(tfCatUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        browse();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnExtractSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractSymbolActionPerformed
        // TODO add your handling code here:
        extractSymbols();
    }//GEN-LAST:event_btnExtractSymbolActionPerformed

    private void btnExtractPvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractPvActionPerformed
        // TODO add your handling code here:
        if (tfSymbolParsingStatus1.getText().startsWith("OK")) {
            this.extractPVAtom();
        } else {
            JOptionPane.showMessageDialog(null, "Extraction is not done");
        }
    }//GEN-LAST:event_btnExtractPvActionPerformed

    private void btnPatomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatomActionPerformed
        // TODO add your handling code here:
        tfPatom.setText("Begin extraction Please wait ...");
        tfPatom.update(tfPatom.getGraphics());
        // tfPatom.validate();
        extractPAtom();
    }//GEN-LAST:event_btnPatomActionPerformed

    private void btnStaticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStaticActionPerformed
        // TODO add your handling code here:
        makeStatic();
    }//GEN-LAST:event_btnStaticActionPerformed

    private void btnUpload1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpload1ActionPerformed
        // TODO add your handling code here:
        uploadCompressedPvFile();
    }//GEN-LAST:event_btnUpload1ActionPerformed

    private void btnUpload2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpload2ActionPerformed
        // TODO add your handling code here:
        uploadCompressedPFile();
    }//GEN-LAST:event_btnUpload2ActionPerformed

    private void btnUpload3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpload3ActionPerformed
        // TODO add your handling code here:
        uploadCompressedSFile();
    }//GEN-LAST:event_btnUpload3ActionPerformed

    private void btnExtractSymbol1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractSymbol1ActionPerformed
        // TODO add your handling code here:
        this.parseDailySymbol();
    }//GEN-LAST:event_btnExtractSymbol1ActionPerformed

    private void btnUpload4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpload4ActionPerformed
        // TODO add your handling code here:
        createZipContainer();
    }//GEN-LAST:event_btnUpload4ActionPerformed

    private void btnUploadContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadContainerActionPerformed
        // TODO add your handling code here:
        uploadContainer();
    }//GEN-LAST:event_btnUploadContainerActionPerformed

    private void uploadContainer() {
        String fileNameOnServer = "manifest.zip";
        String sep = System.getProperty("file.separator");
        String fname = tfDailyFolderPath.getText()+sep+"manifest"+sep+"manifest.zip";
        File compressedFile = new File(fname);
        
        this.postFileToServer(fileNameOnServer, compressedFile);

    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        createCatScript();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnCatUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatUploadActionPerformed
        // TODO add your handling code here:
        uploadCatScript();
    }//GEN-LAST:event_btnCatUploadActionPerformed

    private void uploadCatScript() {
        String fileNameOnServer = "cat.csv.zip";
        this.postFileToServer(fileNameOnServer, compressedCatFile);
    }

    private void createCatScript() {

        tfCatScript.setText("Categorization - Please wait...");
        tfCatScript.update(tfCatScript.getGraphics());

        GeneralDB gdb = new GeneralDB();
        Date d = new Date();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");
        dir = dir + sep + "Parser" + sep + "Output";
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date dt = new Date();
        File outputfile = new File(dir + sep + "cat-" + sdf.format(dt) + ".csv");
        BufferedWriter bw = null;

        try {

            bw = new BufferedWriter(new FileWriter(outputfile));
            String query = "select symbol_code, symbol_name, symbol_sector, symbol_category,"
                    + "symbol_short_name from market_symbol order by symbol_sector";
            ArrayList<Vector> al = gdb.searchRecord(query);
            for (Vector v : al) {
                String scode = (String) v.get(0);
                String sname = (String) v.get(1);
                String ssector = (String) v.get(2);
                String scategory = (String) v.get(3);
                String sshort = (String) v.get(4);

                String line = scode + "," + sname + "," + ssector + "," + scategory + "," + sshort;
                bw.write(line);
                bw.newLine();
            }

            tfCatScript.setText("TL - Please wait...");
            tfCatScript.update(tfCatScript.getGraphics());

            String q2 = "select max(ddate) from daily_quote";
            String maxDate = gdb.getSingleColumnData(q2);

            String q3 = "select dsymbol, dmcap from daily_quote "
                    + "where ddate = '" + maxDate + "' "
                    + "order by dmcap desc "
                    + " FETCH FIRST 30 ROWS ONLY";

            //System.out.println(q3);
            ArrayList<Vector> al3 = gdb.searchRecord(q3);

            for (Vector v : al3) {
                String symbol = (String) v.get(0);
                String q4 = "select symbol_name, symbol_short_name from "
                        + "market_symbol where symbol_code like '" + symbol + "'";
                //System.out.println(q4);
                Vector vec = gdb.getSingleRow(q4);

                if (vec == null) {

                } else {

                    String scode = symbol;
                    String sname = (String) vec.get(0);
                    String ssector = "Last Day";
                    String scategory = "Top-30";
                    String sshort = (String) vec.get(1);
                    String line = scode + "," + sname + "," + ssector + "," + scategory + "," + sshort;
                    bw.write(line);
                    bw.newLine();
                }
            }

            tfCatScript.setText("T10 - Please wait...");
            tfCatScript.update(tfCatScript.getGraphics());

            SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
            Date mdate = null;
            try {
                mdate = sdf2.parse(maxDate);
            } catch (ParseException pe) {
                System.out.println(pe.getMessage());
            }

            Calendar cal = Calendar.getInstance();
            cal.setTime(mdate);
            cal.add(Calendar.DAY_OF_MONTH, -10);
            String ndate = sdf2.format(cal.getTime());

            String q4 = "select dsymbol, SUM(dmcap)as cap from daily_quote "
                    + "where ddate > '" + ndate + "' "
                    + "and dsymbol not like '%-%' "
                    + "group by dsymbol "
                    + "order by cap desc "
                    + "FETCH FIRST 30 ROWS ONLY";
            //System.out.println(q4);
            ArrayList<Vector> al4 = gdb.searchRecord(q4);
            for (Vector v : al4) {
                String symbol = (String) v.get(0);
                String q5 = "select symbol_name, symbol_short_name from "
                        + "market_symbol where symbol_code like '" + symbol + "'";
                Vector vec = gdb.getSingleRow(q5);

                if (vec == null) {

                } else {

                    String scode = symbol;
                    String sname = (String) vec.get(0);
                    String ssector = "Last 10-days";
                    String scategory = "Top-30";
                    String sshort = (String) vec.get(1);
                    String line = scode + "," + sname + "," + ssector + "," + scategory + "," + sshort;

                    bw.write(line);
                    bw.newLine();
                }
            }

            tfCatScript.setText("T30 - Please wait...");
            tfCatScript.update(tfCatScript.getGraphics());

            cal.setTime(mdate);
            cal.add(Calendar.DAY_OF_MONTH, -30);
            ndate = sdf2.format(cal.getTime());

            String qv = "select dsymbol, SUM(dmcap)as cap from daily_quote "
                    + "where ddate > '" + ndate + "' "
                    + "and dsymbol not like '%-%' "
                    + "group by dsymbol "
                    + "order by cap desc "
                    + "FETCH FIRST 30 ROWS ONLY";
            //System.out.println(qv);

            ArrayList<Vector> qvl = gdb.searchRecord(qv);
            for (Vector v : qvl) {
                String symbol = (String) v.get(0);
                String q = "select symbol_name, symbol_short_name from "
                        + "market_symbol where symbol_code like '" + symbol + "'";
                Vector vec = gdb.getSingleRow(q);

                if (vec == null) {
                } else {

                    String scode = symbol;
                    String sname = (String) vec.get(0);
                    String ssector = "Last 30-days";
                    String scategory = "Top-30";
                    String sshort = (String) vec.get(1);
                    String line = scode + "," + sname + "," + ssector + "," + scategory + "," + sshort;
                    bw.write(line);
                    bw.newLine();
                }
            }

            bw.close();

            tfCatScript.setText("Compressing - Please wait...");
            tfCatScript.update(tfCatScript.getGraphics());

            boolean written = false;
            compressedCatFile = new File(dir + sep + "cat-" + sdf.format(dt) + ".csv.zip");
            boolean compressed = this.compress(outputfile.getAbsolutePath(),
                    compressedCatFile.getAbsolutePath(), getPassword(new Date()));

            if (compressed) {
                written = true;
                tfCatScript.setText("OK");
                tfCatScript.update(tfCatScript.getGraphics());
            } else {
                written = false;
                tfCatScript.setText("ERROR");
                tfCatScript.update(tfCatScript.getGraphics());

            }

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
                System.out.println(ioe.getMessage());
            }

        }
    }

    private void uploadCompressedPvFile() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date d = this.jdcFileDate.getDate();
        String str = sdf.format(d);
        String fileNameOnServer = str + "-pv.cmf";
        this.postFileToServer(fileNameOnServer, compressedPvFile);
    }

    private void uploadCompressedPFile() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date d = this.jdcFileDate.getDate();
        String str = sdf.format(d);
        String fileNameOnServer = str + "-p.cmf";
        this.postFileToServer(fileNameOnServer, compressedPFile);
    }

    private void uploadCompressedSFile() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date d = this.jdcFileDate.getDate();
        String str = sdf.format(d);
        String fileNameOnServer = str + "-s.cmf";
        this.postFileToServer(fileNameOnServer, compressedSFile);
    }

    private void makeStatic() {
        tfSatom.setText("Listing Statics, Please wait..");
        boolean prepared = this.prepareSDataList();
        if (prepared) {
            tfSatom.setText("OK");
            tfSatom1.setText("OK");

            Date d = this.jdcFileDate.getDate();

            if (d == null) {
                JOptionPane.showMessageDialog(null, "Please provide date of feed file");
            } else {
                tfSatom.setText("Begin extracting Values Please wait...");
                tfSatom.update(tfSatom.getGraphics());
                boolean extracted = this.extractSAtomSymbol(d);
                if (extracted) {
                    tfSatom.setText("OK");
                    tfSatom1.setText("OK");

                    boolean created = this.createSAtomFile();
                    if (created) {
                        tfSatom.setText("OK");
                        tfSatom1.setText("OK");
                        btnStatic.setEnabled(false);
                    } else {
                        tfSatom.setText("Error");
                        tfSatom1.setText("Error");
                    }

                } else {
                    tfSatom.setText("Error");
                    tfSatom1.setText("Error");
                }
            }
        }

    }

    private void extractPAtom() {
        if (this.pvAtomList.size() < 10) {
            JOptionPane.showMessageDialog(null, "Unrealistic size returned"
                    + "by pv-atom cluster");
        } else {

            String symbol = pvAtomList.get(0).getSymbolCode();

            double rate = 0;
            int i = 1;
            for (TickData td : pvAtomList) {
                String sym = td.getSymbolCode();
                if (sym.compareToIgnoreCase(symbol) == 0) {
                    double r = Double.parseDouble(td.getSymbolPrice());
                    if (r == rate) {

                    } else {
                        this.pAtomList.add(td);
                        tfPatom1.setText("Entry:" + i);
                        tfPatom1.update(tfPatom1.getGraphics());
                        //  tfPatom1.validate();
                        i++;
                    }

                    rate = r;
                }

                symbol = sym;

            }

            boolean written = this.createPAtomFile();
            if (written) {
                tfPatom.setText("OK");
                tfPatom1.setText("OK");
                btnPatom.setEnabled(false);
            }
        }
    }

    private void outputSymbolList() {
        for (KData kd : this.kdataList) {
            System.out.println(kd.toString());
        }
    }

    private void outputPvList() {
        for (TickData td : this.pvAtomList) {
            System.out.println(td.toString());
        }

    }

    private void extractSymbols() {
        tfSymbolParsingStatus.setText("Parsing Please wait....");
        tfSymbolParsingStatus.update(tfSymbolParsingStatus.getGraphics());
        //  tfSymbolParsingStatus.validate();

        Set<String> s = getSymbolSet();

        tfSymbolParsingStatus.setText("Consolidating Please wait...");
        tfSymbolParsingStatus.update(tfSymbolParsingStatus.getGraphics());
        //  tfSymbolParsingStatus.validate();

        for (String symbol : s) {
            symbolList.add(symbol);
            tfSymbolParsingStatus1.setText(symbol);
            tfSymbolParsingStatus1.update(tfSymbolParsingStatus1.getGraphics());
            //  tfSymbolParsingStatus1.validate();
        }

        tfSymbolParsingStatus.setText("Preparing K-Data, Please wait...");
        tfSymbolParsingStatus.update(tfSymbolParsingStatus.getGraphics());
        // tfSymbolParsingStatus.validate();

        boolean prepared = prepareKDataList();
        if (prepared) {
            tfSymbolParsingStatus.setText("extraction completed");
            tfSymbolParsingStatus1.setText("OK");
            btnExtractSymbol.setEnabled(false);
        } else {
            tfSymbolParsingStatus.setText("Error");
            tfSymbolParsingStatus1.setText("Error");
            btnExtractSymbol.setEnabled(false);
        }
    }

    private boolean prepareKDataList() {
        BufferedWriter bw = null;
        BufferedReader br = null;
        boolean prepared = false;
        int tv = 0;
        DecimalFormat df = new DecimalFormat("#.##");

        try {

            File inputFile = new File(this.tfFeedFile.getText());
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";

            while ((line = br.readLine()) != null) {

                if (line.startsWith("K")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");
                    String lineSymbol = toke[2];
                    lineSymbol = lineSymbol.trim();
                    String rot = toke[7];
                    String tov = toke[8];

                    double rate = Double.parseDouble(rot);
                    rate = rate / 10000;
                    String rt = df.format(rate);

                    int vi = Integer.parseInt(tov);
                    tov = Integer.toString(vi);

                    KData k = new KData(lineSymbol, rt, tov);
                    kdataList.add(k);

                    tfSymbolParsingStatus1.setText(lineSymbol);
                    tfSymbolParsingStatus1.update(tfSymbolParsingStatus1.getGraphics());
                    //    tfSymbolParsingStatus1.validate();

                }
            }
            prepared = true;

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());

        } catch (Exception e) {
            tfSymbolParsingStatus1.setText("Error");
            tfSymbolParsingStatus.setText("Error");
            System.out.println(e.getMessage());
            e.printStackTrace();

        } finally {
            try {
                br.close();
                bw.close();
            } catch (Exception e) {
            }
        }

        return prepared;

    }

    private void browse() {

        JFileChooser fileChooser = new JFileChooser();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");

        //  System.out.println(dir + sep);
        File directory = new File(dir + sep + "Parser");
        //  System.out.println(directory);

        if (!(directory.exists())) {
            directory.mkdir();
        }

        fileChooser.setCurrentDirectory(directory);

        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            tfFeedFile.setText(selectedFile.getAbsolutePath());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FParsing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FParsing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FParsing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FParsing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FParsing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCatUpload;
    private javax.swing.JButton btnExtractPv;
    private javax.swing.JButton btnExtractSymbol;
    private javax.swing.JButton btnExtractSymbol1;
    private javax.swing.JButton btnPatom;
    private javax.swing.JButton btnStatic;
    private javax.swing.JButton btnUpload1;
    private javax.swing.JButton btnUpload2;
    private javax.swing.JButton btnUpload3;
    private javax.swing.JButton btnUpload4;
    private javax.swing.JButton btnUploadContainer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private com.toedter.calendar.JDateChooser jdcFileDate;
    private javax.swing.JTextField tfCatScript;
    private javax.swing.JTextField tfCatUpload;
    private javax.swing.JTextField tfDailyFolderPath;
    private javax.swing.JTextField tfDailyStatus2;
    private javax.swing.JTextField tfDailyStatus21;
    private javax.swing.JTextField tfDailyStatus3;
    private javax.swing.JTextField tfDailyStatus6;
    private javax.swing.JTextField tfExtractPVAtomStatus;
    private javax.swing.JTextField tfExtractPVAtomStatus1;
    private javax.swing.JTextField tfFeedFile;
    private javax.swing.JTextField tfPatom;
    private javax.swing.JTextField tfPatom1;
    private javax.swing.JTextField tfSatom;
    private javax.swing.JTextField tfSatom1;
    private javax.swing.JTextField tfSymbolParsingStatus;
    private javax.swing.JTextField tfSymbolParsingStatus1;
    private javax.swing.JTextField tfUploadPFile;
    private javax.swing.JTextField tfUploadPvFile;
    private javax.swing.JTextField tfUploadSFile;
    private javax.swing.JTextField tfdailyStatus1;
    private javax.swing.JTextField tfdailyStatus2;
    // End of variables declaration//GEN-END:variables

    private Set<String> getSymbolSet() {
        Set<String> s = new HashSet<>();

        File inputFile = new File(this.tfFeedFile.getText());
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";
            while ((line = br.readLine()) != null) {
                if (line.startsWith("K")) {
                    ////System.out.println(line);
                    String[] toke = line.split("\\|");
                    String lineSymbol = toke[2];
                    lineSymbol = lineSymbol.trim();
                    s.add(lineSymbol);
                    tfSymbolParsingStatus1.setText(lineSymbol);
                    tfSymbolParsingStatus1.update(tfSymbolParsingStatus1.getGraphics());
                    //      tfSymbolParsingStatus1.validate();
                }
            }
        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());
        } finally {
            try {
                br.close();

            } catch (Exception e) {
            }
        }

        return s;
    }

    private void extractPVAtom() {
        this.tfExtractPVAtomStatus.setText("Extracting ....");
        this.tfExtractPVAtomStatus.update(tfExtractPVAtomStatus.getGraphics());
        // this.tfExtractPVAtomStatus.validate();

        Date date = this.jdcFileDate.getDate();

        if (date == null) {
            JOptionPane.showMessageDialog(null, "Please select date");
        } else if (this.symbolList.size() < 10) {
            JOptionPane.showMessageDialog(null, "Number of companies in list is not valid");
        } else if (this.kdataList.size() < 10) {
            JOptionPane.showMessageDialog(null, "The size returned by ktype is not valid");
        } else {
            for (String symbol : symbolList) {

                this.tfExtractPVAtomStatus1.setText(symbol);
                this.tfExtractPVAtomStatus1.update(tfExtractPVAtomStatus1.getGraphics());
                //    this.tfExtractPVAtomStatus1.validate();

                extractPVAtomSymbol(symbol, date);
            }

            boolean written = createPVAtomFile();
            if (written) {
                this.tfExtractPVAtomStatus.setText("OK");
                this.tfExtractPVAtomStatus1.setText("OK");
                btnExtractPv.setEnabled(false);
            } else {

            }

        }
    }

    private void extractPVAtomSymbol(String symbol, Date date) {
        int numLine = getNumLine(symbol);
        int secUnit = (int) 28800 / numLine;

        Calendar cal = new GregorianCalendar();
        cal.setTime(date);
        String dt = new SimpleDateFormat("yyyy-MM-dd").format(date);
        String dateStr = dt + " 09:30:00";
        Date tstampDate = new Date();
        SimpleDateFormat sdfHMS = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            tstampDate = sdfHMS.parse(dateStr);
        } catch (ParseException pe) {
            System.out.println(pe.getMessage());
        }

        cal.setTime(tstampDate);

        for (KData kd : this.kdataList) {
            if (kd.getLineSymbol().compareToIgnoreCase(symbol) == 0) {
                TickData td = new TickData();
                td.setDdate(dt);
                td.setSymbolCode(symbol);
                td.setSymbolPrice(kd.getRate());
                td.setSymbolVolume(kd.getVolume());
                String etime = sdfHMS.format(cal.getTime());
                td.setEventTime(etime);
                td.setUid(etime + "-" + symbol);
                pvAtomList.add(td);
                cal.add(Calendar.SECOND, secUnit);
            }
        }

    }

    private boolean extractSAtomSymbol(Date date) {
        boolean extracted = false;
        int numLine = sdataList.size();
        int secUnit = (int) 28800 / numLine;

        Calendar cal = new GregorianCalendar();
        cal.setTime(date);
        String dt = new SimpleDateFormat("yyyy-MM-dd").format(date);
        String dateStr = dt + " 09:30:00";
        Date tstampDate = new Date();
        SimpleDateFormat sdfHMS = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            tstampDate = sdfHMS.parse(dateStr);
        } catch (ParseException pe) {
            System.out.println(pe.getMessage());
        }

        cal.setTime(tstampDate);

        try {
            int c = 0;
            for (SData s : this.sdataList) {

                StaticData sd = new StaticData();
                sd.setdDate(dt);
                sd.setPrice(s.getRate());
                sd.setVolume(s.getVolume());
                String etime = sdfHMS.format(cal.getTime());
                sd.setEventTime(etime);
                sd.setUid(etime);
                sAtomList.add(sd);

                this.tfSatom1.setText("Entry:" + c);
                tfSatom1.update(tfSatom1.getGraphics());
                cal.add(Calendar.SECOND, secUnit);
                c++;
            }

            extracted = true;
            tfSatom1.setText("OK");

        } catch (Exception e) {

            extracted = false;
        }

        return extracted;

    }

    private boolean createPVAtomFile() {
        boolean written = false;
        this.tfExtractPVAtomStatus.setText("Creating output file...");
        Date d = new Date();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");
        dir = dir + sep + "Parser" + sep + "Output";
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date dt = this.jdcFileDate.getDate();
        File outputfile = new File(dir + sep + "PVAtom-" + sdf.format(dt) + ".csv");
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(outputfile));
            int c = 0;
            for (TickData td : this.pvAtomList) {

                String line = td.getSymbolCode() + "," + td.getSymbolPrice() + ","
                        + "" + td.getSymbolVolume() + "," + td.getEventTime() + ","
                        + "" + td.getDdate() + "," + td.getUid() + "\n";

                bw.write(line);

                tfExtractPVAtomStatus1.setText("Entry: " + c);
                tfExtractPVAtomStatus1.update(tfExtractPVAtomStatus1.getGraphics());
                //   tfExtractPVAtomStatus1.validate();

                c++;
            }

            bw.close();

            this.tfExtractPVAtomStatus.setText("Creating output file...");
            this.tfExtractPVAtomStatus.update(tfExtractPVAtomStatus.getGraphics());
            // tfExtractPVAtomStatus.validate();

            compressedPvFile = new File(dir + sep + "PVAtom-" + sdf.format(dt) + ".zip");
            boolean compressed = this.compress(outputfile.getAbsolutePath(),
                    compressedPvFile.getAbsolutePath());

            if (compressed) {
                written = true;
            } else {
                written = false;
            }

        } catch (IOException ioe) {
            this.tfExtractPVAtomStatus.setText("Error in creating output file...");
            this.tfExtractPVAtomStatus1.setText("Error");
            System.out.println("Error in creating file\n" + ioe.getMessage());
        } catch (Exception e) {
            this.tfExtractPVAtomStatus.setText("Error in creating output file...");
            this.tfExtractPVAtomStatus1.setText("Error");
            System.out.println("Error in creating file\n" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private boolean createPAtomFile() {
        boolean written = false;
        this.tfExtractPVAtomStatus.setText("Creating output file...");
        Date d = new Date();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");
        dir = dir + sep + "Parser" + sep + "Output";
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date dt = this.jdcFileDate.getDate();
        File outputfile = new File(dir + sep + "QPAtom-" + sdf.format(dt) + ".csv");
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(outputfile));
            int c = 0;
            for (TickData td : this.pAtomList) {

                String line = td.getSymbolCode() + "," + td.getSymbolPrice() + ","
                        + "" + td.getSymbolVolume() + "," + td.getEventTime() + ","
                        + "" + td.getDdate() + "," + td.getUid() + "\n";

                bw.write(line);

                tfPatom1.setText("Entry: " + c);
                tfPatom1.update(tfPatom1.getGraphics());
                //  tfPatom1.validate();

                c++;
            }

            bw.close();

            this.tfPatom.setText("Creating output file...");
            this.tfPatom.update(tfExtractPVAtomStatus.getGraphics());
            // tfPatom.validate();

            compressedPFile = new File(dir + sep + "QPAtom-" + sdf.format(dt) + ".zip");
            boolean compressed = this.compress(outputfile.getAbsolutePath(),
                    compressedPFile.getAbsolutePath());

            if (compressed) {
                written = true;
            } else {
                written = false;
            }

        } catch (IOException ioe) {
            this.tfPatom.setText("Error in creating output file...");
            this.tfPatom1.setText("Error");
            System.out.println("Error in creating file\n" + ioe.getMessage());
        } catch (Exception e) {
            this.tfPatom.setText("Error in creating output file...");
            this.tfPatom1.setText("Error");
            System.out.println("Error in creating file\n" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private boolean createSAtomFile() {
        boolean written = false;
        this.tfSatom.setText("Creating output file...");
        tfSatom.update(tfSatom.getGraphics());

        Date d = new Date();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");
        dir = dir + sep + "Parser" + sep + "Output";
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date dt = this.jdcFileDate.getDate();
        File outputfile = new File(dir + sep + "StaticAtom-" + sdf.format(dt) + ".csv");
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new FileWriter(outputfile));
            int c = 0;
            for (StaticData sd : this.sAtomList) {

                String line = sd.getPrice() + "," + sd.getVolume() + ","
                        + "" + sd.getEventTime() + "," + sd.getdDate() + ","
                        + "" + sd.getUid() + "\n";

                bw.write(line);

                tfSatom1.setText("Entry: " + c);
                tfSatom1.update(tfSatom1.getGraphics());
                //  tfPatom1.validate();

                c++;
            }

            bw.close();

            this.tfSatom.setText("Creating output file...");
            this.tfSatom.update(tfSatom.getGraphics());

            tfSatom1.setText("Wait..");
            tfSatom1.update(tfSatom1.getGraphics());
            // tfPatom.validate();

            compressedSFile = new File(dir + sep + "StaticAtom-" + sdf.format(dt) + ".zip");
            boolean compressed = this.compress(outputfile.getAbsolutePath(),
                    compressedSFile.getAbsolutePath());

            if (compressed) {
                written = true;
            } else {
                written = false;
            }

        } catch (IOException ioe) {
            this.tfSatom.setText("Error in creating output file...");
            this.tfSatom1.setText("Error");
            System.out.println("Error in creating file\n" + ioe.getMessage());
        } catch (Exception e) {
            this.tfSatom.setText("Error in creating output file...");
            this.tfSatom1.setText("Error");
            System.out.println("Error in creating file\n" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ioe) {
            }

        }

        return written;

    }

    private int getNumLine(String symbol) {
        int count = 0;
        for (int i = 0; i <= this.kdataList.size() - 1; i++) {
            KData kd = kdataList.get(i);
            String s = kd.getLineSymbol();
            if (s.compareToIgnoreCase(symbol) == 0) {
                count++;
            }
        }

        return count;
    }

    private boolean prepareSDataList() {
        BufferedWriter bw = null;
        BufferedReader br = null;
        boolean prepared = false;
        int tv = 0;
        DecimalFormat df = new DecimalFormat("#.##");

        try {

            File inputFile = new File(this.tfFeedFile.getText());
            br = new BufferedReader(new FileReader(inputFile));
            String line = "";

            while ((line = br.readLine()) != null) {

                if (line.startsWith("S")) {
                    String[] toke = line.split("\\|");

                    String rot = toke[4];
                    String tov = toke[2];

                    double rate = Double.parseDouble(rot);
                    rate = rate / 100;
                    int vol = Integer.parseInt(tov);
                    int this_vol = vol - tv;
                    tv = vol;

                    String l = rate + "," + this_vol;

                    if (this_vol == 0) {
                    } else {
                        SData sd = new SData(df.format(rate), df.format(this_vol));
                        sdataList.add(sd);
                    }

                    tfSatom1.setText(rot);
                    tfSatom1.update(tfSatom1.getGraphics());
                    // tfSatom1.validate();

                }
            }
            prepared = true;

        } catch (IOException ioe) {
            System.out.println(ioe.getMessage());

        } catch (Exception e) {
            tfSymbolParsingStatus1.setText("Error");
            tfSymbolParsingStatus.setText("Error");
            System.out.println(e.getMessage());
            e.printStackTrace();

        } finally {
            try {
                br.close();
                bw.close();
            } catch (Exception e) {
            }
        }

        return prepared;

    }

    //-===========COMPRESSING FILES==================
    private boolean compress(String inputFile, String compressedFile) {
        boolean compressed = false;

        try {
            ZipFile zipFile = new ZipFile(compressedFile);
            File inputFileH = new File(inputFile);
            ZipParameters parameters = new ZipParameters();

            // COMP_DEFLATE is for compression
            // COMp_STORE no compression
            parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
            // DEFLATE_LEVEL_ULTRA = maximum compression
            // DEFLATE_LEVEL_MAXIMUM
            // DEFLATE_LEVEL_NORMAL = normal compression
            // DEFLATE_LEVEL_FAST
            // DEFLATE_LEVEL_FASTEST = fastest compression
            parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_ULTRA);
            // Set encryption method
            parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);
            // Set key strength
            parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);
            parameters.setEncryptFiles(true);

            parameters.setPassword(getPassword());
            // file compressed
            zipFile.addFile(inputFileH, parameters);

            long uncompressedSize = inputFileH.length();
            File outputFileH = new File(compressedFile);
            long comrpessedSize = outputFileH.length();

            //System.out.println("Size "+uncompressedSize+" vs "+comrpessedSize);
            double ratio = (double) comrpessedSize / (double) uncompressedSize;
            // System.out.println("File compressed with compression ratio : " + ratio);
            compressed = true;

        } catch (Exception e) {
            e.printStackTrace();
        }

        return compressed;
    }

    private boolean compress(String inputFile, String compressedFile, String password) {
        boolean compressed = false;

        try {
            ZipFile zipFile = new ZipFile(compressedFile);
            File inputFileH = new File(inputFile);
            ZipParameters parameters = new ZipParameters();

            // COMP_DEFLATE is for compression
            // COMp_STORE no compression
            parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
            // DEFLATE_LEVEL_ULTRA = maximum compression
            // DEFLATE_LEVEL_MAXIMUM
            // DEFLATE_LEVEL_NORMAL = normal compression
            // DEFLATE_LEVEL_FAST
            // DEFLATE_LEVEL_FASTEST = fastest compression
            parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_ULTRA);
            // Set encryption method
            parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);
            // Set key strength
            parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);
            parameters.setEncryptFiles(true);

            parameters.setPassword(password);
            // file compressed
            zipFile.addFile(inputFileH, parameters);

            long uncompressedSize = inputFileH.length();
            File outputFileH = new File(compressedFile);
            long comrpessedSize = outputFileH.length();

            //System.out.println("Size "+uncompressedSize+" vs "+comrpessedSize);
            double ratio = (double) comrpessedSize / (double) uncompressedSize;
            System.out.println("File compressed with compression ratio : " + ratio);
            compressed = true;

        } catch (Exception e) {
            e.printStackTrace();
        }

        return compressed;
    }

    private String getPassword() {
        String password = "";
        CommonTasks ct = new CommonTasks();
        String b64p = ct.encodeBase64(zip_password);
        password = ct.getMd5(b64p);
        System.out.println("The P-Hash is: " + password);
        return password;
    }

    private String getPassword(Date d) {
        String password = "";
        CommonTasks ct = new CommonTasks();
        String b64p = ct.encodeBase64(zip_password);
        password = ct.getMd5(b64p);
        System.out.println("The P-Hash is: " + password);
        return password;
    }

    private void unzipFile() {
        String source = "folder/source.zip";
        String destination = "folder/source/";
        String password = "password";

        try {
            ZipFile zipFile = new ZipFile(source);
            if (zipFile.isEncrypted()) {
                zipFile.setPassword(password);
            }
            zipFile.extractAll(destination);
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }

    private void postFileToServer(String fileNameOnServer, File fileToUpload) {
        Thread t = new Thread(new Runnable() {
            public void run() {

                BufferedReader in = null;
                BufferedInputStream fis = null;
                OutputStream os = null;

                try {
                    String url = CommonTasks.getUrlUploadAtomFile();
                    String configString = CommonTasks.getBasicConfigString();
                    configString += "&filename=" + fileNameOnServer;
                    url = url + configString;

                    HttpURLConnection httpUrlConnection
                            = (HttpURLConnection) new URL(url).openConnection();

                    httpUrlConnection.setDoOutput(true);
                    httpUrlConnection.setRequestMethod("POST");
                    os = httpUrlConnection.getOutputStream();

                    fis = new BufferedInputStream(new FileInputStream(fileToUpload));
                    int totalByte = fis.available();
                    for (int i = 0; i < totalByte; i++) {
                        os.write(fis.read());
                    }

                    os.close();
                    in = new BufferedReader(
                            new InputStreamReader(
                                    httpUrlConnection.getInputStream()));

                    String s = null;
                    while ((s = in.readLine()) != null) {
                        if (s.startsWith("ELN>")) {
                            s = s.replaceAll("ELN>", "");
                            System.out.println(s);
                        }

                    }
                    in.close();
                    fis.close();

                } catch (MalformedURLException me) {
                    System.out.println(me.getMessage());
                } catch (ProtocolException pe) {
                    System.out.println(pe.getMessage());
                } catch (IOException ioe) {
                    System.out.println(ioe.getMessage());
                } finally {
                    try {
                        in.close();
                        fis.close();
                        os.close();

                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }

                }

            }
        });

        t.start();

    }

    private void parseDailySymbol() {

        tfdailyStatus1.setText("Begin parsing daily data...");
        tfdailyStatus1.update(tfdailyStatus1.getGraphics());

        Date d = new Date();
        String password = getPassword(d);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        String of = sdf.format(d);
        BufferedWriter bw = null;
        ArrayList<String> symbolList = getSymbolList();
        int size = symbolList.size();
        String dir = System.getProperty("user.home");
        String sep = System.getProperty("file.separator");
        dir = dir + sep + "Parser" + sep + "Output" + sep + of;
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }

        tfDailyFolderPath.setText(file.getAbsolutePath());

        int count = 0;
        for (String symbol : symbolList) {
            try {
                File f = new File(dir + sep + symbol + ".csv");
                bw = new BufferedWriter(new FileWriter(f));
                String query = "select ddate,dopen, dhigh,"
                        + "dlow, dclose, dvolume from daily_quote where "
                        + "dsymbol like '" + symbol + "'"
                        + " order by ddate desc";

                ArrayList<Vector> al = new GeneralDB().searchRecord(query);
                for (Vector v : al) {

                    String ddate = (String) v.get(0);
                    String dopen = (String) v.get(1);
                    String dhigh = (String) v.get(2);
                    String dlow = (String) v.get(3);
                    String dclose = (String) v.get(4);
                    String dvolume = (String) v.get(5);

                    String line = ddate + "," + dopen + "," + dhigh + ","
                            + "" + dlow + "," + dclose + "," + dvolume;
                    bw.write(line);
                    bw.newLine();
                }

                bw.close();
                count++;
                this.tfDailyStatus2.setText(count + " of " + size);
                this.tfDailyStatus2.update(tfDailyStatus2.getGraphics());

                File symbolZipFile = new File(dir + sep + symbol + ".zip");

                boolean compressed = this.compress(dir + sep + symbol + ".csv",
                        symbolZipFile.getAbsolutePath(), password);

                boolean written = false;

                if (compressed) {
                    written = true;
                    this.postFileToServer(symbolZipFile.getName(), symbolZipFile);

                } else {
                    written = false;
                    this.tfDailyStatus2.setText("C:-ERROR");
                    this.tfDailyStatus2.update(tfDailyStatus2.getGraphics());
                }

            } catch (IOException ioe) {
                System.out.println(ioe.getMessage());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    bw.close();
                } catch (IOException ioe) {
                }
            }

        }

        tfDailyStatus2.setText("OK");
        tfDailyStatus2.update(tfDailyStatus2.getGraphics());

        tfdailyStatus1.setText("OK");
        tfdailyStatus1.update(tfdailyStatus1.getGraphics());

//        this.tf.setText("Creating zip manifest wait...");
//        tfdailyStatus
    }

    private void createZipContainer() {
        String sep = System.getProperty("file.separator");

        tfdailyStatus2.setText("Creating container Please wait..");
        tfdailyStatus2.update(tfdailyStatus2.getGraphics());

        tfDailyStatus21.setText("Creating container Please wait..");
        tfDailyStatus21.update(tfDailyStatus21.getGraphics());

        String folder = this.tfDailyFolderPath.getText();
        Date d = new Date();
        String fname = new SimpleDateFormat("yyyyMMddHHmmss").format(d);
        fname = "manifest" + ".zip";
        String outputFile = folder + sep + "manifest";
        File nfolder = new File(outputFile);
        if (!nfolder.exists()) {
            nfolder.mkdirs();
        }

        outputFile = outputFile + sep + fname;
        String password = getPassword(d);
        String extension = ".zip";

        ZipContainer zc = new ZipContainer();
        boolean isOk = zc.CreateZipWithOutputStream(folder, outputFile, extension, "NO");

        if (isOk) {

            tfdailyStatus2.setText("OK");
            tfdailyStatus2.update(tfdailyStatus2.getGraphics());

            tfDailyStatus21.setText("OK");
            tfDailyStatus21.update(tfDailyStatus21.getGraphics());

        } else {
            tfdailyStatus2.setText("ERROR");
            tfdailyStatus2.update(tfdailyStatus2.getGraphics());

            tfDailyStatus21.setText("ERROR");
            tfDailyStatus21.update(tfDailyStatus21.getGraphics());
        }
    }

    private ArrayList<String> getSymbolList() {

        ArrayList<String> symbolList = new ArrayList<>();
        String query = "select symbol_code from market_symbol";
        ArrayList<Vector> al = new GeneralDB().searchRecord(query);

        for (Vector v : al) {
            symbolList.add((String) v.get(0));
        }

        return symbolList;
    }

}

class TickData {

    private String symbolCode;
    private String symbolPrice;
    private String symbolVolume;
    private String eventTime;
    private String ddate;
    private String uid;

    public TickData() {
    }

    public TickData(String symbolCode, String symbolPrice, String symbolVolume,
            String eventTime, String ddate, String uid) {

        this.symbolCode = symbolCode;
        this.symbolPrice = symbolPrice;
        this.symbolVolume = symbolVolume;
        this.eventTime = eventTime;
        this.ddate = ddate;
        this.uid = uid;
    }

    public String getSymbolCode() {
        return symbolCode;
    }

    public void setSymbolCode(String symbolCode) {
        this.symbolCode = symbolCode;
    }

    public String getSymbolPrice() {
        return symbolPrice;
    }

    public void setSymbolPrice(String symbolPrice) {
        this.symbolPrice = symbolPrice;
    }

    public String getSymbolVolume() {
        return symbolVolume;
    }

    public void setSymbolVolume(String symbolVolume) {
        this.symbolVolume = symbolVolume;
    }

    public String getEventTime() {
        return eventTime;
    }

    public void setEventTime(String eventTime) {
        this.eventTime = eventTime;
    }

    public String getDdate() {
        return ddate;
    }

    public void setDdate(String ddate) {
        this.ddate = ddate;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String toString() {
        String dt = CommonText.monosize(this.getDdate(), 15);
        String scode = CommonText.monosize(this.getSymbolCode(), 15);
        String sprice = CommonText.monosize(this.getSymbolPrice(), 10);
        String svol = CommonText.monosize(this.getSymbolVolume(), 15);
        String etime = CommonText.monosize(this.getEventTime(), 25);

        String str = dt + scode + sprice + svol + etime;
        return str;
    }

}

class KData {

    private String lineSymbol;
    private String rate;
    private String volume;

    public KData(String lineSymbol, String rate, String volume) {
        this.lineSymbol = lineSymbol;
        this.rate = rate;
        this.volume = volume;
    }

    public String getLineSymbol() {
        return lineSymbol;
    }

    public void setLineSymbol(String lineSymbol) {
        this.lineSymbol = lineSymbol;
    }

    public String getRate() {
        return rate;
    }

    public void setRate(String rate) {
        this.rate = rate;
    }

    public String getVolume() {
        return volume;
    }

    public void setVolume(String volume) {
        this.volume = volume;
    }

    public String toString() {

        String sy = CommonText.monosize(this.getLineSymbol(), 10);
        String rt = CommonText.monosize(this.getRate(), 5);
        String vo = CommonText.monosize(this.getVolume(), 10);

        String str = sy + rt + vo;

        return str;

    }

}

class SData {

    private String rate;
    private String volume;

    public SData(String rate, String volume) {

        this.rate = rate;
        this.volume = volume;
    }

    public String getRate() {
        return rate;
    }

    public void setRate(String rate) {
        this.rate = rate;
    }

    public String getVolume() {
        return volume;
    }

    public void setVolume(String volume) {
        this.volume = volume;
    }

    public String toString() {
        String rt = CommonText.monosize(this.getRate(), 25);
        String vo = CommonText.monosize(this.getVolume(), 12);

        String str = rt + vo;

        return str;

    }

}

class StaticData {

    private String price;
    private String volume;
    private String eventTime;
    private String dDate;
    private String uid;

    public StaticData() {

    }

    public String getPrice() {
        return price;
    }

    public void setPrice(String price) {
        this.price = price;
    }

    public String getVolume() {
        return volume;
    }

    public void setVolume(String volume) {
        this.volume = volume;
    }

    public String getEventTime() {
        return eventTime;
    }

    public void setEventTime(String eventTime) {
        this.eventTime = eventTime;
    }

    public String getdDate() {
        return dDate;
    }

    public void setdDate(String dDate) {
        this.dDate = dDate;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

}
